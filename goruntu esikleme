#GÖRÜNTÜ EŞİKLEME

import cv2
import matplotlib.pyplot as plt

#resmi içe aktar
img = cv2.imread("img1.jpg")
img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
plt.figure()
plt.imshow(img, cmap = "gray")
plt.axis("off")
plt.show()

#eşikleme
_, thresh_img = cv2.threshold(img, thresh = 60, maxval = 255, type = cv2.THRESH_BINARY) #60-255 arası derinliğe sahip olanları siliyoruz yani beyaz oluyorlar. Eğer type ..inv olsaydı tam tersi olacaktı yani siyah

plt.figure()
plt.imshow(thresh_img, cmap ="gray")
plt.axis("off")
plt.show()


#uyarlamalı eşik değeri
thresh_img2 = cv2.adaptiveThreshold(img, 255, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY , 11 , 8)
plt.figure()
plt.imshow(thresh_img2, cmap = "grey")
plt.axis("off")
plt.show()
"""
255 → Maksimum piksel değeri. Eşikleme sonucu beyaz olacak pikseller 255 değeri alır.

cv2.ADAPTIVE_THRESH_MEAN_C → Eşik değerini belirleme yöntemi:
& MEAN_C, belirlenen bölgedeki piksellerin ortalama değeri alınarak eşik değeri belirlenir.
Alternatif olarak cv2.ADAPTIVE_THRESH_GAUSSIAN_C kullanılabilir, bu ise ağırlıklı ortalama alarak daha yumuşak bir geçiş sağlar.

cv2.THRESH_BINARY → Uygulanan thresholding türü:
& BINARY: Piksel değeri eşikten büyükse beyaz (255), küçükse siyah (0) olur.
Alternatif olarak cv2.THRESH_BINARY_INV kullanılabilir (siyah-beyaz ters çevrilmiş olur).

11 → Blok boyutu (kernel size): Her piksel için eşik değerini belirlerken dikkate alınacak komşuluk bölgesinin 
büyüklüğüdür. Büyük değerler, daha yumuşak ve geniş alanları kapsar.

8 → C değeri: Ortalama veya Gauss hesaplandıktan sonra çıkarılan sabit bir değerdir. Küçük değerler fazla değişiklik yapmaz, büyük değerler ise daha koyu sonuçlar verebilir.

Özetle:
Bu kod, görüntünün farklı bölgeleri için uyarlanabilir eşikleme yaparak, her pikselin 
çevresindeki 11×11’lik bir alanın ortalamasını alıyor ve ardından 8 değerini çıkartarak sonucu belirliyor. 
Böylece gölge ve ışık farklarına duyarlı bir şekilde eşikleme uygulanıyor.


"""
