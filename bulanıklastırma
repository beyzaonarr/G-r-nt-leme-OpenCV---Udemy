# BULANIKLASTIRMA


import cv2
import matplotlib.pyplot as plt
import numpy as np

import warnings
warnings.filterwarnings("ignore")

#blurring (detayı azaltır, görüntüyü engeller)
img = cv2.imread("NYC.jpg")
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
plt.figure(), plt.imshow(img), plt.axis("off"), plt.title("orijinal"), plt.show()

"""
ortalama bulanıklaştırma yöntemi
"""

dst2 = cv2.blur(img, ksize = (3,3))
plt.figure(), plt.imshow(dst2), plt.axis("off"), plt.title("Ortalama Blur")

"""
gaussian blur
"""

gb = cv2.GaussianBlur(img, ksize = (3,3), sigmaX = 7)
plt.figure(), plt.imshow(gb), plt.axis("off"), plt.title("Gaussian Blur")
# sigmaX = 7 → X ekseni boyunca standart sapma değeri 7 olarak belirlenmiş. Bu, bulanıklığın ne kadar güçlü olacağını belirler.
    
"""
medyan blur

"""
mb = cv2.medianBlur(img, ksize = 3)
plt.figure(), plt.imshow(mb ), plt.axis("off"), plt.title("Medyan Blur")

#ksize = 3 → Çekirdek boyutu (kernel size). Burada 3x3’lük bir pencere kullanılıyor.
#Medyan filtrede ksize tek sayı olmak zorundadır (örneğin: 3, 5, 7 gibi).


def gaussianNoise(image):
    row, col, ch = image.shape #ch 3 mü 1 mi yani grayscale mi 
    mean = 0
    var = 0.05 #standart sapmayı elde etmek için kullanıyoruz
    sigma = var**0.5 # sigma aslında standart sapma
    
    gauss = np.random.normal(mean,sigma,(row,col,ch))
    gauss = gauss.reshape(row,col,ch)
    noisy = image + gauss
    
    return noisy
    
#içe aktar normalize et
img = cv2.imread("NYC.jpg")
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)/255
plt.figure(), plt.imshow(img), plt.axis("off"), plt.title("Orijinal"), plt.show()

gaussianNoisyImage = gaussianNoise(img)
plt.figure(), plt.imshow(gaussianNoisyImage), plt.axis("off"), plt.title("Gauss Noisy"), plt.show()

#gauss blur
gb2 = cv2.GaussianBlur(gaussianNoisyImage, ksize = (3,3), sigmaX = 7)
plt.figure(), plt.imshow(gb2), plt.axis("off"), plt.title("with Gaussian Blur")


def saltPepperNoise(image):
    row,col,ch = image.shape
    s_vs_p = 0.5 #salt ve pepper hesabı, 0.3 yazsaydık diğeri 0.7 olmak zorunda kalırdı
    
    amount = 0.004 #0.004 demek, tüm görüntü piksellerinin %0.4’üne rastgele gürültü eklenmesi demektir.
    
    noisy = np.copy(image)

    # salt beyaz
    num_salt = np.ceil(amount * image.size * s_vs_p) # np.ceil'in görevi 1.2'yi 1.0 yapmak vs, tam sayı haline getirmek
    coords = [np.random.randint(0, i-1, int(num_salt)) for i in image.shape] #ccordinates
    noisy[coords] = 1 #beyaz olduğu için 1
    
    #pepper siyah
    num_pepper = np.ceil(amount * image.size * s_vs_p)
    coords = [np.random.randint(0, i - 1, int(num_pepper)) for i in image.shape]
    noisy[coords] = 0 # siyah olduğu için 0
    
    return noisy

spImage = saltPepperNoise(img)  # net resme siyah beyaz noktalar ekledi
plt.figure(), plt.imshow(spImage), plt.axis("off"), plt.title("SP Image")

mb2 = cv2.medianBlur(spImage.astype(np.float32), ksize = 3 ) #hem bulanıklaştırdı hem de noktaları sildi
plt.figure(), plt.imshow(mb2),plt.axis("off"), plt.title("with Median Blur)
