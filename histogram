#HİSTOGRAM

import cv2
import matplotlib.pyplot as plt
import numpys as np

#resmi içe aktar
img = cv2.imread("red_blue.jpg")
img_vis = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
plt.figure(), plt.imshow(img_vis)

print(img.shape)

img_hist = cv2.calcHist([img],channels =[0],mask =None, histSize =[256], ranges = [0,256])
print(img_hist.shape) #output ( 256 1)
plt.figure(), plt.plot(img_hist)

color = ("b","g","r")
plt.figure()
for i,c in enumerate(color):  
    hist = cv2.calcHist([img], channels=[i], mask = None, histSize =[256], ranges = [0,256]
    plt.plot(hist, color = c)
"""
enumerate(color), hem içinde bulunan renkleri (c değişkeni) hem de indeks numarasını (i değişkeni) döner.
i'nin değerleri:
i = 0 → Mavi kanal (b)
i = 1 → Yeşil kanal (g)
i = 2 → Kırmızı kanal (r)

"""
#
golden_gate = cv2.imread("goldenGate.jpg")
golden_gate_vis = cv2.cvtColor(golden_gate, cv2.COLOR_BGR2RGB)
plt.figure(), plt.imshow(golden_gate_vis)

print(golden_gate.shape)

mask = np.zeros(golden_gate.shape[:2], np.uint8) #satır ve sütün aynı kalarak siyah bir resim adı maske
plt.figure(), plt.imshow(mask, cmap ="gray")

mask[1500:2000, 1000:2000] = 255 # o bölgeleri beyaz yapıyoruz = 255 diyerek
plt.figure(), plt.imshow(mask, cmap = "gray")

masked_img_vis = cv2.bitwise_and(golden_gate_vis,golden_gate_vis, mask = mask)
plt.figure(), plt.imshow(masked_img_vis, cmap = "gray")

"""
prametreler:
golden_gate_vis → Asıl görüntü.
golden_gate_vis → Aynı görüntüyü iki kez veriyoruz (çünkü AND işlemi uyguluyoruz).
mask=mask → Maske uyguluyoruz!
mask adlı değişken, hangi piksellerin görünür olacağını belirler.
Maskede beyaz (255) olan pikseller korunur, siyah (0) olanlar sıfırlanır (yani görünmez olur).

"""
#kestiğimiz görselin hist grafiği
masked_img = cv2.bitwise_and(golden_gate, golden_gate, mask = mask)
masked_img_hist = cv2.calcHist([golden_gate], channels = [0], mask = mask, histSize = [256], ranges = [0,256]
plt.figure(), plt.plot(masked_img_hist)    # 0 red 1 green 2 blue

#histogram eşitleme 
#karşıtlık arttırma
img = cv2.imread("hist_equ.jpg", 0)
plt.figure(), plt.imshow(img,cmap = "gray")

img_hist = cv2.calcHist([img], channels = [0], mask = None, histSize = [256], ranges = [0,256])
plt.figure(), plt.plot(img_hist) #resim düşük kontrastlı olduğu için dengesiz grafik

eq_hist =cv2.equalizeHist(img) #açık renk tonu olan yerleri 255'e çektik , koyu olanları 0'a çektik dengeledik
plt.figure(), plt.imshow(eq_hist, cmap = "gray")

eq_img_hist = cv2.calcHist([eq_hist], channels = [0], mask = None, histSize = [256], ranges =[ 0,256] )
plt.figure(), plt.plot(eq_img_hist)  #daha dengeli bir grafik

"""
Histogram Eşitleme Nedir?
Düşük kontrastlı görüntülerde, parlaklık seviyeleri çok belirli bir aralıkta sıkışmış olabilir.
Histogram eşitleme, parlaklık değerlerini daha dengeli bir şekilde yayarak kontrastı artırır.
Özellikle karanlık veya fazla aydınlık görüntülerde detayları daha belirgin hale getirmek için kullanılır.

"""

